{"version":3,"sources":["images/loader.gif","components/SearchForm.js","components/WeatherData.js","App.js","api.js","serviceWorker.js","index.js"],"names":["module","exports","SearchForm","props","autoComplete","onSubmit","onCitySubmittedHandler","className","type","name","value","city","placeholder","ref","inputRef","onChange","onCityChangedHandler","WeatherData","weather","errorMessage","style","marginTop","location","temp","hum","condition","App","useState","setCity","setWeather","isLoading","setIsLoading","setErrorMessage","useRef","useEffect","cityInput","match","params","didCancel","axios","then","result","data","sys","country","main","humidity","description","catch","err","response","getWeather","res","hasOwnProperty","message","e","preventDefault","current","blur","history","push","target","src","LoaderPath","alt","Boolean","window","hostname","ReactDOM","render","StrictMode","basename","process","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,oC,yLCmB5BC,EAjBI,SAAAC,GACf,OACI,0BAAMC,aAAa,MAAMC,SAAUF,EAAMG,wBACrC,2BACIC,UAAW,kBACXC,KAAK,OACLC,KAAM,OACNC,MAAOP,EAAMQ,KACbC,YAAa,YACbC,IAAKV,EAAMW,SACXC,SAAUZ,EAAMa,uBAEpB,4BAAQT,UAAW,iBAAnB,YCmBGU,EA/BK,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAC5B,OAAGA,EACQ,yBAAKC,MAAO,CAACC,UAAW,SAAUF,GAGzCD,EAMA,yBAAKX,UAAW,gBACZ,6BACI,yBAAKA,UAAW,gBAAgB,2CAAhC,IAAwDW,EAAQI,WAGpE,6BACI,yBAAKf,UAAW,gBAAgB,8CAAhC,IAA2DW,EAAQK,KAAnE,YAGJ,6BACI,yBAAKhB,UAAW,gBAAgB,2CAAhC,IAAwDW,EAAQM,MAGpE,6BACI,yBAAKjB,UAAW,gBAAgB,4CAAhC,IAAyDW,EAAQO,aAnBlE,M,iBCqFAC,EAnFH,SAACvB,GAAW,IAAD,EACKwB,mBAAS,IADd,mBACZhB,EADY,KACNiB,EADM,OAEWD,mBAAS,MAFpB,mBAEZT,EAFY,KAEHW,EAFG,OAGeF,oBAAS,GAHxB,mBAGZG,EAHY,KAGDC,EAHC,OAIqBJ,mBAAS,MAJ9B,mBAIZR,EAJY,KAIEa,EAJF,KAKblB,EAAWmB,iBAAO,MAExBC,qBAAU,WACN,IAAMC,EAAYhC,EAAMiC,MAAMC,OAAO1B,KACrC,GAAIwB,EAAJ,CAWA,IAAIG,GAAY,EA8BhB,OAzBAV,EAAQO,GAMRJ,GAAa,GACbC,EAAgB,MCxCE,SAACrB,GACvB,OAAO4B,MAAA,4DACuD5B,EADvD,yDAEF6B,MAAK,SAAAC,GAEF,MAAO,CACHnB,UAFJmB,EAASA,EAAOC,MAEKjC,KAAO,KAAOgC,EAAOE,IAAIC,QAC1CrB,KAAMkB,EAAOI,KAAKtB,KAClBC,IAAKiB,EAAOI,KAAKC,SACjBrB,UAAWgB,EAAOvB,QAAQ,GAAG6B,gBAGpCC,OAAM,SAACC,GACJ,OAAOA,EAAIC,YD6BfC,CAAWhB,GACNK,MAAK,SAAAY,GACGd,IAEEc,EAAIV,MAAQU,EAAIV,KAAKW,eAAe,YACnCrB,EAAgBoB,EAAIV,KAAKY,SACzBzB,EAAW,OAIXA,EAAWuB,GAEfrB,GAAa,OAIlB,WACHO,GAAY,GAzCZP,GAAa,KA2ClB,CAAC5B,EAAMiC,MAAMC,OAAO1B,OAYvB,OACI,yBAAKJ,UAAW,gBACZ,6BACA,kBAAC,EAAD,CACII,KAAMA,EACNG,SAAUA,EACVR,uBAZmB,SAACiD,GAC5BA,EAAEC,iBACF1C,EAAS2C,QAAQC,OACjBvD,EAAMwD,QAAQC,KAAd,WAAuBjD,KAUfK,qBAjBiB,SAACuC,GAC1B3B,EAAQ2B,EAAEM,OAAOnD,UAkBXoB,EAEI,yBAAKgC,IAAKC,IAAYC,IAAI,KAD1B,kBAAC,EAAD,CAAa7C,aAAcA,EAAcD,QAASA,OEzEhD+C,QACW,cAA7BC,OAAO5C,SAAS6C,UAEe,UAA7BD,OAAO5C,SAAS6C,UAEhBD,OAAO5C,SAAS6C,SAAS/B,MACvB,2D,mBCVNgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAUC,oBACrB,kBAAC,IAAD,CAAOC,KAAM,UAAWC,UAAWhD,MAGzCiD,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLC,QAAQD,MAAMA,EAAM5B,c","file":"static/js/main.47208b21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.8060bbc7.gif\";","import React from \"react\";\r\n\r\nconst SearchForm = props => {\r\n    return (\r\n        <form autoComplete=\"off\" onSubmit={props.onCitySubmittedHandler}>\r\n            <input\r\n                className={'city-form-input'}\r\n                type=\"text\"\r\n                name={'city'}\r\n                value={props.city}\r\n                placeholder={'City Name'}\r\n                ref={props.inputRef}\r\n                onChange={props.onCityChangedHandler}/>\r\n\r\n            <button className={'city-form-btn'}>Search</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\n\r\nconst WeatherData = ({ weather, errorMessage }) => {\r\n    if(errorMessage){\r\n        return <div style={{marginTop: '10px'}}>{errorMessage}</div>;\r\n    }\r\n\r\n    if(!weather){\r\n        return null;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"weather-list\"}>\r\n            <div>\r\n                <div className={\"weather-item\"}><span>Location:</span> {weather.location}</div>\r\n            </div>\r\n\r\n            <div>\r\n                <div className={\"weather-item\"}><span>Temperature:</span> {weather.temp} &#8451;</div>\r\n            </div>\r\n\r\n            <div>\r\n                <div className={\"weather-item\"}><span>Humidity:</span> {weather.hum}</div>\r\n            </div>\r\n\r\n            <div>\r\n                <div className={\"weather-item\"}><span>Condition:</span> {weather.condition}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherData;\r\n","import React, {useEffect, useRef, useState} from 'react';\nimport './App.css';\nimport * as axios from \"axios\";\nimport {getWeather} from './api';\n\nimport SearchForm from './components/SearchForm';\nimport WeatherData from \"./components/WeatherData\";\n\nimport LoaderPath from './images/loader.gif';\n\nconst App = (props) => {\n    const [city, setCity] = useState('');\n    const [weather, setWeather] = useState(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        const cityInput = props.match.params.city;\n        if(!cityInput){\n            setIsLoading(false);\n            return;\n        }\n\n        /*\n        this boolean is used to track if getWeather request has been canceled or not\n        if we make a new request before the first request finishes then right before the next\n        render's useEffect previous useEffect's cleanup method will execute and change the didCancel of the previous useEffect\n        to false thus disregarding the results from the first getWeather request\n        */\n        let didCancel = false;\n\n\n        //this two state changes are batched because they are inside\n        // react-specific handler and not wrapped with async function\n        setCity(cityInput);\n        /*\n        make this state slice true to trigger loader to show up\n        then when the weather data has been received and set to state, change\n        this slice to false to hide the loader\n        */\n        setIsLoading(true)\n        setErrorMessage(null);\n\n        getWeather(cityInput)\n            .then(res => {\n                if (!didCancel) {\n                    //this check is to identify if the server returned us error\n                    if(res.data && res.data.hasOwnProperty('message')){\n                        setErrorMessage(res.data.message);\n                        setWeather(null);\n                    } else {\n                        //this two state changes will not be batched and cause two re-renders\n                        //because they are inside a promise\n                        setWeather(res);\n                    }\n                    setIsLoading(false);\n                }\n            });\n\n        return () => {\n            didCancel = true;\n        }\n    }, [props.match.params.city]);\n\n    const onCityChangedHandler = (e) => {\n        setCity(e.target.value);\n    }\n\n    const onCitySubmittedHandler = (e) => {\n        e.preventDefault();\n        inputRef.current.blur();\n        props.history.push(`/${city}`);\n    }\n\n    return (\n        <div className={'main-wrapper'}>\n            <div>\n            <SearchForm\n                city={city}\n                inputRef={inputRef}\n                onCitySubmittedHandler={onCitySubmittedHandler}\n                onCityChangedHandler={onCityChangedHandler}/>\n\n            {!isLoading\n                ? <WeatherData errorMessage={errorMessage} weather={weather} />\n                : <img src={LoaderPath} alt=\"\"/>\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import * as axios from \"axios\";\r\n\r\nexport const getWeather = (city) => {\r\n    return axios\r\n        .get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=00f6daa7f916ccf5b37f9d32350b67a4`)\r\n        .then(result => {\r\n            result = result.data;\r\n            return {\r\n                location: result.name + ', ' + result.sys.country,\r\n                temp: result.main.temp,\r\n                hum: result.main.humidity,\r\n                condition: result.weather[0].description\r\n            };\r\n        })\r\n        .catch((err) => {\r\n            return err.response;\r\n        })\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {BrowserRouter, Route} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Route path={'/:city?'} component={App} />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}